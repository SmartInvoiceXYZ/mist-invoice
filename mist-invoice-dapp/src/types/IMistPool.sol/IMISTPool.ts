/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type TokenDataStruct = {
  standard: BigNumberish;
  token: AddressLike;
  identifier: BigNumberish;
  amount: BigNumberish;
};

export type TokenDataStructOutput = [
  standard: bigint,
  token: string,
  identifier: bigint,
  amount: bigint
] & { standard: bigint; token: string; identifier: bigint; amount: bigint };

export type PreCommitmentStruct = {
  receiverHash: BigNumberish;
  encryptedNote: BytesLike;
  tokenData: TokenDataStruct;
};

export type PreCommitmentStructOutput = [
  receiverHash: bigint,
  encryptedNote: string,
  tokenData: TokenDataStructOutput
] & {
  receiverHash: bigint;
  encryptedNote: string;
  tokenData: TokenDataStructOutput;
};

export type DepositDataStruct = {
  nonce: BigNumberish;
  sender: AddressLike;
  preCommitments: PreCommitmentStruct[];
};

export type DepositDataStructOutput = [
  nonce: bigint,
  sender: string,
  preCommitments: PreCommitmentStructOutput[]
] & {
  nonce: bigint;
  sender: string;
  preCommitments: PreCommitmentStructOutput[];
};

export type ExtDataStruct = {
  chainId: BigNumberish;
  treeIndex: BigNumberish;
  account: AddressLike;
  transferType: BigNumberish;
  tokenData: TokenDataStruct;
};

export type ExtDataStructOutput = [
  chainId: bigint,
  treeIndex: bigint,
  account: string,
  transferType: bigint,
  tokenData: TokenDataStructOutput
] & {
  chainId: bigint;
  treeIndex: bigint;
  account: string;
  transferType: bigint;
  tokenData: TokenDataStructOutput;
};

export interface IMISTPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "deposit((uint256,address,(uint256,bytes,(uint8,address,uint256,uint256))[]),bytes)"
      | "getNonce"
      | "getNonce(address)"
      | "getNullifyingKey"
      | "getNullifyingKey()"
      | "transfer"
      | "transfer(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))"
      | "verifyBalanceOf"
      | "verifyBalanceOf(address,uint256,uint256,uint256,uint256[],bytes)"
      | "withdraw"
      | "withdraw(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit((uint256,address,(uint256,bytes,(uint8,address,uint256,uint256))[]),bytes)",
    values: [DepositDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifyingKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifyingKey()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BytesLike, BytesLike, ExtDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))",
    values: [BytesLike, BytesLike, ExtDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBalanceOf",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBalanceOf(address,uint256,uint256,uint256,uint256[],bytes)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BytesLike, ExtDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))",
    values: [BytesLike, BytesLike, ExtDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit((uint256,address,(uint256,bytes,(uint8,address,uint256,uint256))[]),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNonce(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifyingKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifyingKey()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalanceOf(address,uint256,uint256,uint256,uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))",
    data: BytesLike
  ): Result;
}

export interface IMISTPool extends BaseContract {
  connect(runner?: ContractRunner | null): IMISTPool;
  waitForDeployment(): Promise<this>;

  interface: IMISTPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [depositData: DepositDataStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  "deposit((uint256,address,(uint256,bytes,(uint8,address,uint256,uint256))[]),bytes)": TypedContractMethod<
    [depositData: DepositDataStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getNonce: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  "getNonce(address)": TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getNullifyingKey: TypedContractMethod<[], [bigint], "view">;

  "getNullifyingKey()": TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;

  "transfer(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))": TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;

  verifyBalanceOf: TypedContractMethod<
    [
      token: AddressLike,
      minAmount: BigNumberish,
      root: BigNumberish,
      registry: BigNumberish,
      nullifiers: BigNumberish[],
      proof: BytesLike
    ],
    [boolean],
    "view"
  >;

  "verifyBalanceOf(address,uint256,uint256,uint256,uint256[],bytes)": TypedContractMethod<
    [
      token: AddressLike,
      minAmount: BigNumberish,
      root: BigNumberish,
      registry: BigNumberish,
      nullifiers: BigNumberish[],
      proof: BytesLike
    ],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;

  "withdraw(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))": TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [depositData: DepositDataStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit((uint256,address,(uint256,bytes,(uint8,address,uint256,uint256))[]),bytes)"
  ): TypedContractMethod<
    [depositData: DepositDataStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNullifyingKey"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNullifyingKey()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))"
  ): TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyBalanceOf"
  ): TypedContractMethod<
    [
      token: AddressLike,
      minAmount: BigNumberish,
      root: BigNumberish,
      registry: BigNumberish,
      nullifiers: BigNumberish[],
      proof: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyBalanceOf(address,uint256,uint256,uint256,uint256[],bytes)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      minAmount: BigNumberish,
      root: BigNumberish,
      registry: BigNumberish,
      nullifiers: BigNumberish[],
      proof: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(bytes,bytes,(uint256,uint256,address,uint8,(uint8,address,uint256,uint256)))"
  ): TypedContractMethod<
    [proof: BytesLike, inputs: BytesLike, extData: ExtDataStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
