/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IMulticall3 {
  export type CallStruct = { target: AddressLike; callData: BytesLike };

  export type CallStructOutput = [target: string, callData: string] & {
    target: string;
    callData: string;
  };

  export type Call3Struct = {
    target: AddressLike;
    allowFailure: boolean;
    callData: BytesLike;
  };

  export type Call3StructOutput = [
    target: string,
    allowFailure: boolean,
    callData: string
  ] & { target: string; allowFailure: boolean; callData: string };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [success: boolean, returnData: string] & {
    success: boolean;
    returnData: string;
  };

  export type Call3ValueStruct = {
    target: AddressLike;
    allowFailure: boolean;
    value: BigNumberish;
    callData: BytesLike;
  };

  export type Call3ValueStructOutput = [
    target: string,
    allowFailure: boolean,
    value: bigint,
    callData: string
  ] & {
    target: string;
    allowFailure: boolean;
    value: bigint;
    callData: string;
  };
}

export interface IMulticall3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "aggregate"
      | "aggregate((address,bytes)[])"
      | "aggregate3"
      | "aggregate3((address,bool,bytes)[])"
      | "aggregate3Value"
      | "aggregate3Value((address,bool,uint256,bytes)[])"
      | "blockAndAggregate"
      | "blockAndAggregate((address,bytes)[])"
      | "getBasefee"
      | "getBasefee()"
      | "getBlockHash"
      | "getBlockHash(uint256)"
      | "getBlockNumber"
      | "getBlockNumber()"
      | "getChainId"
      | "getChainId()"
      | "getCurrentBlockCoinbase"
      | "getCurrentBlockCoinbase()"
      | "getCurrentBlockDifficulty"
      | "getCurrentBlockDifficulty()"
      | "getCurrentBlockGasLimit"
      | "getCurrentBlockGasLimit()"
      | "getCurrentBlockTimestamp"
      | "getCurrentBlockTimestamp()"
      | "getEthBalance"
      | "getEthBalance(address)"
      | "getLastBlockHash"
      | "getLastBlockHash()"
      | "tryAggregate"
      | "tryAggregate(bool,(address,bytes)[])"
      | "tryBlockAndAggregate"
      | "tryBlockAndAggregate(bool,(address,bytes)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregate",
    values: [IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate((address,bytes)[])",
    values: [IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3",
    values: [IMulticall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3((address,bool,bytes)[])",
    values: [IMulticall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3Value",
    values: [IMulticall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3Value((address,bool,uint256,bytes)[])",
    values: [IMulticall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAndAggregate",
    values: [IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAndAggregate((address,bytes)[])",
    values: [IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasefee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasefee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate",
    values: [boolean, IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate(bool,(address,bytes)[])",
    values: [boolean, IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBlockAndAggregate",
    values: [boolean, IMulticall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBlockAndAggregate(bool,(address,bytes)[])",
    values: [boolean, IMulticall3.CallStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate((address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3((address,bool,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3Value((address,bool,uint256,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAndAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAndAggregate((address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBasefee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBasefee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate(bool,(address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBlockAndAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBlockAndAggregate(bool,(address,bytes)[])",
    data: BytesLike
  ): Result;
}

export interface IMulticall3 extends BaseContract {
  connect(runner?: ContractRunner | null): IMulticall3;
  waitForDeployment(): Promise<this>;

  interface: IMulticall3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aggregate: TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [[bigint, string[]] & { blockNumber: bigint; returnData: string[] }],
    "payable"
  >;

  "aggregate((address,bytes)[])": TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [[bigint, string[]] & { blockNumber: bigint; returnData: string[] }],
    "payable"
  >;

  aggregate3: TypedContractMethod<
    [calls: IMulticall3.Call3Struct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  "aggregate3((address,bool,bytes)[])": TypedContractMethod<
    [calls: IMulticall3.Call3Struct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  aggregate3Value: TypedContractMethod<
    [calls: IMulticall3.Call3ValueStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  "aggregate3Value((address,bool,uint256,bytes)[])": TypedContractMethod<
    [calls: IMulticall3.Call3ValueStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  blockAndAggregate: TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;

  "blockAndAggregate((address,bytes)[])": TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;

  getBasefee: TypedContractMethod<[], [bigint], "view">;

  "getBasefee()": TypedContractMethod<[], [bigint], "view">;

  getBlockHash: TypedContractMethod<
    [blockNumber: BigNumberish],
    [string],
    "view"
  >;

  "getBlockHash(uint256)": TypedContractMethod<
    [blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getBlockNumber: TypedContractMethod<[], [bigint], "view">;

  "getBlockNumber()": TypedContractMethod<[], [bigint], "view">;

  getChainId: TypedContractMethod<[], [bigint], "view">;

  "getChainId()": TypedContractMethod<[], [bigint], "view">;

  getCurrentBlockCoinbase: TypedContractMethod<[], [string], "view">;

  "getCurrentBlockCoinbase()": TypedContractMethod<[], [string], "view">;

  getCurrentBlockDifficulty: TypedContractMethod<[], [bigint], "view">;

  "getCurrentBlockDifficulty()": TypedContractMethod<[], [bigint], "view">;

  getCurrentBlockGasLimit: TypedContractMethod<[], [bigint], "view">;

  "getCurrentBlockGasLimit()": TypedContractMethod<[], [bigint], "view">;

  getCurrentBlockTimestamp: TypedContractMethod<[], [bigint], "view">;

  "getCurrentBlockTimestamp()": TypedContractMethod<[], [bigint], "view">;

  getEthBalance: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  "getEthBalance(address)": TypedContractMethod<
    [addr: AddressLike],
    [bigint],
    "view"
  >;

  getLastBlockHash: TypedContractMethod<[], [string], "view">;

  "getLastBlockHash()": TypedContractMethod<[], [string], "view">;

  tryAggregate: TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  "tryAggregate(bool,(address,bytes)[])": TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;

  tryBlockAndAggregate: TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;

  "tryBlockAndAggregate(bool,(address,bytes)[])": TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aggregate"
  ): TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [[bigint, string[]] & { blockNumber: bigint; returnData: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "aggregate((address,bytes)[])"
  ): TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [[bigint, string[]] & { blockNumber: bigint; returnData: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "aggregate3"
  ): TypedContractMethod<
    [calls: IMulticall3.Call3Struct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "aggregate3((address,bool,bytes)[])"
  ): TypedContractMethod<
    [calls: IMulticall3.Call3Struct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "aggregate3Value"
  ): TypedContractMethod<
    [calls: IMulticall3.Call3ValueStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "aggregate3Value((address,bool,uint256,bytes)[])"
  ): TypedContractMethod<
    [calls: IMulticall3.Call3ValueStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "blockAndAggregate"
  ): TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "blockAndAggregate((address,bytes)[])"
  ): TypedContractMethod<
    [calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBasefee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBasefee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockHash"
  ): TypedContractMethod<[blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBlockHash(uint256)"
  ): TypedContractMethod<[blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChainId()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockCoinbase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockCoinbase()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockDifficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockDifficulty()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockGasLimit()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentBlockTimestamp()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthBalance"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthBalance(address)"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastBlockHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastBlockHash()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tryAggregate"
  ): TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tryAggregate(bool,(address,bytes)[])"
  ): TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [IMulticall3.ResultStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tryBlockAndAggregate"
  ): TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tryBlockAndAggregate(bool,(address,bytes)[])"
  ): TypedContractMethod<
    [requireSuccess: boolean, calls: IMulticall3.CallStruct[]],
    [
      [bigint, string, IMulticall3.ResultStructOutput[]] & {
        blockNumber: bigint;
        blockHash: string;
        returnData: IMulticall3.ResultStructOutput[];
      }
    ],
    "payable"
  >;

  filters: {};
}
