/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ISmartInvoiceEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amounts"
      | "client"
      | "init"
      | "lock"
      | "locked"
      | "milestone"
      | "provider"
      | "release(uint256)"
      | "release()"
      | "releaseTokens"
      | "released"
      | "resolve"
      | "resolver"
      | "token"
      | "withdraw"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amounts", values?: undefined): string;
  encodeFunctionData(functionFragment: "client", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "milestone", values?: undefined): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "released", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "amounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "client", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "milestone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "release(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export interface ISmartInvoiceEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): ISmartInvoiceEscrow;
  waitForDeployment(): Promise<this>;

  interface: ISmartInvoiceEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amounts: TypedContractMethod<[], [bigint[]], "nonpayable">;

  client: TypedContractMethod<[], [string], "nonpayable">;

  init: TypedContractMethod<
    [_recipient: AddressLike, _amounts: BigNumberish[], _data: BytesLike],
    [void],
    "nonpayable"
  >;

  lock: TypedContractMethod<[_details: BytesLike], [void], "payable">;

  locked: TypedContractMethod<[], [boolean], "nonpayable">;

  milestone: TypedContractMethod<[], [bigint], "nonpayable">;

  "release(uint256)": TypedContractMethod<
    [_milestone: BigNumberish],
    [void],
    "nonpayable"
  >;

  "release()": TypedContractMethod<[], [void], "nonpayable">;

  releaseTokens: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  released: TypedContractMethod<[], [bigint], "nonpayable">;

  resolve: TypedContractMethod<
    [
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  resolver: TypedContractMethod<[], [string], "nonpayable">;

  token: TypedContractMethod<[], [string], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTokens: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amounts"
  ): TypedContractMethod<[], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "client"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amounts: BigNumberish[], _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[_details: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "milestone"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "provider"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "release(uint256)"
  ): TypedContractMethod<[_milestone: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "release()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseTokens"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "released"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<
    [
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolver"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  filters: {};
}
