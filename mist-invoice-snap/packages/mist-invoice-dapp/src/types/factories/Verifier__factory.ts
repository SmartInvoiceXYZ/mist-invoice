/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Verifier, VerifierInterface } from "../Verifier";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "A",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "B",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "C",
            type: "tuple",
          },
        ],
        internalType: "struct Verifier.Proof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256[4]",
        name: "digest",
        type: "uint256[4]",
      },
      {
        internalType: "uint256",
        name: "signal",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[6]",
        name: "input",
        type: "uint256[6]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611597806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a99590c31461003b578063f398789b14610062575b600080fd5b61004e610049366004611203565b610075565b604051901515815260200160405180910390f35b61004e61007036600461130c565b610194565b60408051600680825260e082019092526000918291906020820160c08036833701905050905084816000815181106100af576100af6113ea565b60209081029190910101528051843590829060019081106100d2576100d26113ea565b60209081029190910101528360016020020135816002815181106100f8576100f86113ea565b602090810291909101015283600260200201358160038151811061011e5761011e6113ea565b6020908102919091010152836003602002013581600481518110610144576101446113ea565b6020026020010181815250508281600581518110610164576101646113ea565b60209081029190910101526101878161018236899003890189611430565b6102a6565b159150505b949350505050565b600061019e6110c9565b604080518082018252875181526020808901518183015290835281516080810183528751518184019081528851830151606083015281528251808401845288830180515182525183015181840152818301528382015281518083018352865181528682015181830152838301528151600680825260e082019093526000929091820160c08036833701905050905060005b600681101561027e5784816006811061024a5761024a6113ea565b6020020151828281518110610261576102616113ea565b602090810291909101015280610276816114e9565b91505061022f565b5061028981836102a6565b60000361029b5760019250505061018c565b60009250505061018c565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102d261049d565b9050806080015151855160016102e89190611502565b1461032f5760405162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b60448201526064015b60405180910390fd5b604080518082019091526000808252602082018190525b86518110156104205783878281518110610362576103626113ea565b6020026020010151106103b75760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606401610326565b61040c8261040785608001518460016103d09190611502565b815181106103e0576103e06113ea565b60200260200101518a85815181106103fa576103fa6113ea565b6020026020010151610a18565b610aae565b915080610418816114e9565b915050610346565b5061044981836080015160008151811061043c5761043c6113ea565b6020026020010151610aae565b905061047f61045b8660000151610b47565b8660200151846000015185602001518587604001518b604001518960600151610be6565b61048f5760019350505050610497565b600093505050505b92915050565b6104a561111a565b6040805180820182527f09bc2b5fa991f25f07bd2f14656f07d98eaee8b697baaf3076665ac2dc855ce181527f06712259ba18609855870270437718d66017539a777759a7798512600d7259fd6020808301919091529083528151608080820184527f09a55f6ba13259e1e6b96c7bc5243d6f32d0ed44252bac364c1d9cdfb4dc4bb98285019081527f2646230ca985ed8450f2ad704a2dd049f14e4508ad25d78f94bc23a94a7207a6606080850191909152908352845180860186527f106cd764f294950d8f68e9861b3c949179f74f38d4e03019f567048bdcaed10e81527e5fe246c36bb5505f1ffed99596f9122087c53ce570141bdd01e139535089b8818601528385015285840192909252835180820185527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28186018181527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed838601819052908352865180880188527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b8082527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8289018190528589019290925289890194909452875194850188528488019283528486019190915290835285518087018752918252818501528184015290840152815160078082526101008201909352919082015b60408051808201909152600080825260208201528152602001906001900390816106ad57505060808201908152604080518082019091527f24c1262695f941ff5c04693834ac71f0ef9448d12eca586ac8b02968876bb3d081527f0d600171cfcee50a59bda93a91ef3a092e3abb37526510ee203795fee711de06602082015290518051600090610740576107406113ea565b602002602001018190525060405180604001604052807f16a4d19f5a791014e62de326c57935f3bbd5336abbca96f843c893e9cdcd051281526020017f1b8b5d7fad7b67c1efa037651dc78a70f17d2665c14b47e1075fad404ad6672c81525081608001516001815181106107b7576107b76113ea565b602002602001018190525060405180604001604052807f246298612fb58f148a4ee4cfe9e61bec2430c52335bca56dc7495077b9fa9a3b81526020017f150e288cc5852119687daa5e89a9eff448e7c0198d935e8e0cd58bb7dc78b048815250816080015160028151811061082e5761082e6113ea565b602002602001018190525060405180604001604052807f04d26d5c98acce25f6aec84ab4103789d60f2fc5d15f3be8c32738cbb7ca776c81526020017f11eb6e653666825f5c507e5c011d5a5a8fb9fbc7e659a539fbbf62f56afee2b081525081608001516003815181106108a5576108a56113ea565b602002602001018190525060405180604001604052807f18069306985d23b4d7a25891fead26aa1c441c5b2e010c2749a2c1cfe0f7f8b681526020017f044b7f724507a27a26eef585204e2eac65909ab8dac84d6650dd296641b706be815250816080015160048151811061091c5761091c6113ea565b602002602001018190525060405180604001604052807f07fc26920ef91bd6ed4cb94d4eceecf3f29baf7e038c3a1faed6e1a3821b7c4e81526020017f2ae6bce1beb6dd435d1851bafa53d74c8dcaf30102eac42ad1d51e106f3bdc828152508160800151600581518110610993576109936113ea565b602002602001018190525060405180604001604052807f16d1c29f72313a5580cf171b33f05b4b6e8fedc1cbd51dfcbb7fb26faf93c06e81526020017f174b1e6d3646339d640098421fc186c18895ba879bfa4277a4b1dd9ea23072f68152508160800151600681518110610a0a57610a0a6113ea565b602002602001018190525090565b6040805180820190915260008082526020820152610a3461116b565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610a6357fe5b5080610aa65760405162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b6044820152606401610326565b505092915050565b6040805180820190915260008082526020820152610aca611189565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610b0457fe5b5080610aa65760405162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b6044820152606401610326565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610b8e57506020830151155b15610bae5750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610bd39190611515565b610bdd9084611537565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610c0157505060408051600480825260a0820190925291925060009190602082015b610c4b6111a7565b815260200190600190039081610c435790505090508a82600081518110610c7457610c746113ea565b60200260200101819052508882600181518110610c9357610c936113ea565b60200260200101819052508682600281518110610cb257610cb26113ea565b60200260200101819052508482600381518110610cd157610cd16113ea565b60200260200101819052508981600081518110610cf057610cf06113ea565b60200260200101819052508781600181518110610d0f57610d0f6113ea565b60200260200101819052508581600281518110610d2e57610d2e6113ea565b60200260200101819052508381600381518110610d4d57610d4d6113ea565b6020026020010181905250610d628282610d71565b9b9a5050505050505050505050565b60008151835114610dbd5760405162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b6044820152606401610326565b82516000610dcc82600661154a565b905060008167ffffffffffffffff811115610de957610de961125a565b604051908082528060200260200182016040528015610e12578160200160208202803683370190505b50905060005b8381101561104d57868181518110610e3257610e326113ea565b60200260200101516000015182826006610e4c919061154a565b610e57906000611502565b81518110610e6757610e676113ea565b602002602001018181525050868181518110610e8557610e856113ea565b60200260200101516020015182826006610e9f919061154a565b610eaa906001611502565b81518110610eba57610eba6113ea565b602002602001018181525050858181518110610ed857610ed86113ea565b6020908102919091010151515182610ef183600661154a565b610efc906002611502565b81518110610f0c57610f0c6113ea565b602002602001018181525050858181518110610f2a57610f2a6113ea565b60209081029190910181015151015182610f4583600661154a565b610f50906003611502565b81518110610f6057610f606113ea565b602002602001018181525050858181518110610f7e57610f7e6113ea565b602002602001015160200151600060028110610f9c57610f9c6113ea565b602002015182610fad83600661154a565b610fb8906004611502565b81518110610fc857610fc86113ea565b602002602001018181525050858181518110610fe657610fe66113ea565b602002602001015160200151600160028110611004576110046113ea565b60200201518261101583600661154a565b611020906005611502565b81518110611030576110306113ea565b602090810291909101015280611045816114e9565b915050610e18565b506110566111c7565b6000602082602086026020860160086107d05a03fa9050808061107557fe5b50806110bb5760405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b6044820152606401610326565b505115159695505050505050565b6040805160a0810190915260006060820181815260808301919091528152602081016110f36111a7565b8152602001611115604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c08301919091528152602081016111446111a7565b81526020016111516111a7565b815260200161115e6111a7565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806111ba6111e5565b81526020016111156111e5565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6000806000808486036101c081121561121b57600080fd5b6101008082121561122b57600080fd5b8695508501359350506101a084018681111561124657600080fd5b939692955050506101209290920191903590565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112935761129361125a565b60405290565b60405160c0810167ffffffffffffffff811182821017156112935761129361125a565b600082601f8301126112cd57600080fd5b6112d5611270565b8060408401858111156112e757600080fd5b845b818110156113015780358452602093840193016112e9565b509095945050505050565b6000806000806101c080868803121561132457600080fd5b61132e87876112bc565b9450604087605f88011261134157600080fd5b611349611270565b8060c089018a81111561135b57600080fd5b838a015b81811015611380576113718c826112bc565b8452602090930192840161135f565b5081975061138e8b826112bc565b9650505050508661011f8701126113a457600080fd5b6113ac611299565b9086019080888311156113be57600080fd5b61010088015b838110156113dc5780358352602092830192016113c4565b509598949750929550505050565b634e487b7160e01b600052603260045260246000fd5b60006040828403121561141257600080fd5b61141a611270565b9050813581526020820135602082015292915050565b600081830361010081121561144457600080fd5b6040516060810181811067ffffffffffffffff821117156114675761146761125a565b6040526114748585611400565b81526080603f198301121561148857600080fd5b611490611270565b915061149f85604086016112bc565b82526114ae85608086016112bc565b60208301528160208201526114c68560c08601611400565b6040820152949350505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016114fb576114fb6114d3565b5060010190565b80820180821115610497576104976114d3565b60008261153257634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610497576104976114d3565b8082028115828204841417610497576104976114d356fea26469706673582212206252bb9d56dbd47d316901a90dbf4725cd4a040748a2cb9fdd8c8e0fd56aa7ea64736f6c63430008130033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Verifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Verifier__factory {
    return super.connect(runner) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new Interface(_abi) as VerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Verifier {
    return new Contract(address, _abi, runner) as unknown as Verifier;
  }
}
