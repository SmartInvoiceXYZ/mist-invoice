/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MistInvoiceEscrowWrapper {
  export type MistDataStruct = {
    merkleRoot: BytesLike;
    clientRandom: BytesLike;
    providerRandom: BytesLike;
    clientKey: BytesLike;
    providerKey: BytesLike;
  };

  export type MistDataStructOutput = [
    merkleRoot: string,
    clientRandom: string,
    providerRandom: string,
    clientKey: string,
    providerKey: string
  ] & {
    merkleRoot: string;
    clientRandom: string;
    providerRandom: string;
    clientKey: string;
    providerKey: string;
  };
}

export interface MistInvoiceEscrowWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INVOICE_FACTORY"
      | "createInvoice"
      | "mistPool"
      | "privateDeposit"
      | "privateDispute"
      | "privateRelease"
      | "privateWithdraw"
      | "resolve"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVOICE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [
      MistInvoiceEscrowWrapper.MistDataStruct,
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "mistPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privateDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "privateDispute",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "privateRelease",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "privateWithdraw",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INVOICE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mistPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
}

export interface MistInvoiceEscrowWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): MistInvoiceEscrowWrapper;
  waitForDeployment(): Promise<this>;

  interface: MistInvoiceEscrowWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INVOICE_FACTORY: TypedContractMethod<[], [string], "view">;

  createInvoice: TypedContractMethod<
    [
      _mistData: MistInvoiceEscrowWrapper.MistDataStruct,
      _amounts: BigNumberish[],
      _data: BytesLike,
      _type: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  mistPool: TypedContractMethod<[], [string], "view">;

  privateDeposit: TypedContractMethod<
    [_invoiceAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  privateDispute: TypedContractMethod<
    [_invoiceAddr: AddressLike, _details: BytesLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;

  privateRelease: TypedContractMethod<
    [_invoiceAddr: AddressLike, _proof: BytesLike, _milestone: BigNumberish],
    [void],
    "nonpayable"
  >;

  privateWithdraw: TypedContractMethod<
    [_invoiceAddr: AddressLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;

  resolve: TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INVOICE_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createInvoice"
  ): TypedContractMethod<
    [
      _mistData: MistInvoiceEscrowWrapper.MistDataStruct,
      _amounts: BigNumberish[],
      _data: BytesLike,
      _type: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mistPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "privateDeposit"
  ): TypedContractMethod<[_invoiceAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "privateDispute"
  ): TypedContractMethod<
    [_invoiceAddr: AddressLike, _details: BytesLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "privateRelease"
  ): TypedContractMethod<
    [_invoiceAddr: AddressLike, _proof: BytesLike, _milestone: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "privateWithdraw"
  ): TypedContractMethod<
    [_invoiceAddr: AddressLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
