/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MistInvoiceEscrowWrapper {
  export type MistSecretStruct = {
    merkleRoot: BigNumberish;
    providerHash: BigNumberish;
    clientHash: BigNumberish;
    encData: BytesLike[];
  };

  export type MistSecretStructOutput = [
    merkleRoot: bigint,
    providerHash: bigint,
    clientHash: bigint,
    encData: string[]
  ] & {
    merkleRoot: bigint;
    providerHash: bigint;
    clientHash: bigint;
    encData: string[];
  };
}

export declare namespace Pairing {
  export type G1PointStruct = { X: BigNumberish; Y: BigNumberish };

  export type G1PointStructOutput = [X: bigint, Y: bigint] & {
    X: bigint;
    Y: bigint;
  };

  export type G2PointStruct = {
    X: [BigNumberish, BigNumberish];
    Y: [BigNumberish, BigNumberish];
  };

  export type G2PointStructOutput = [
    X: [bigint, bigint],
    Y: [bigint, bigint]
  ] & { X: [bigint, bigint]; Y: [bigint, bigint] };
}

export declare namespace Verifier {
  export type ProofStruct = {
    A: Pairing.G1PointStruct;
    B: Pairing.G2PointStruct;
    C: Pairing.G1PointStruct;
  };

  export type ProofStructOutput = [
    A: Pairing.G1PointStructOutput,
    B: Pairing.G2PointStructOutput,
    C: Pairing.G1PointStructOutput
  ] & {
    A: Pairing.G1PointStructOutput;
    B: Pairing.G2PointStructOutput;
    C: Pairing.G1PointStructOutput;
  };
}

export interface MistInvoiceEscrowWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLIENT_SIGNAL"
      | "INVOICE_FACTORY"
      | "PROVIDER_SIGNAL"
      | "createInvoice"
      | "mistPool"
      | "privateDispute"
      | "privateRelease"
      | "privateWithdraw"
      | "resolve"
      | "verify"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLIENT_SIGNAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVOICE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_SIGNAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [
      MistInvoiceEscrowWrapper.MistSecretStruct,
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "mistPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privateDispute",
    values: [
      AddressLike,
      BytesLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      Verifier.ProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "privateRelease",
    values: [
      AddressLike,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      Verifier.ProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "privateWithdraw",
    values: [
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      Verifier.ProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      Verifier.ProofStruct,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLIENT_SIGNAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVOICE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_SIGNAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mistPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export interface MistInvoiceEscrowWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): MistInvoiceEscrowWrapper;
  waitForDeployment(): Promise<this>;

  interface: MistInvoiceEscrowWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLIENT_SIGNAL: TypedContractMethod<[], [bigint], "view">;

  INVOICE_FACTORY: TypedContractMethod<[], [string], "view">;

  PROVIDER_SIGNAL: TypedContractMethod<[], [bigint], "view">;

  createInvoice: TypedContractMethod<
    [
      _mistData: MistInvoiceEscrowWrapper.MistSecretStruct,
      _amounts: BigNumberish[],
      _data: BytesLike,
      _type: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  mistPool: TypedContractMethod<[], [string], "view">;

  privateDispute: TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _details: BytesLike,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _role: BigNumberish,
      _proof: Verifier.ProofStruct
    ],
    [void],
    "nonpayable"
  >;

  privateRelease: TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _milestone: BigNumberish,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _proof: Verifier.ProofStruct
    ],
    [void],
    "nonpayable"
  >;

  privateWithdraw: TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _proof: Verifier.ProofStruct,
      _encNote: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  resolve: TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike,
      _encNotes: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;

  verify: TypedContractMethod<
    [
      proof: Verifier.ProofStruct,
      root: BigNumberish,
      digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signal: BigNumberish
    ],
    [boolean],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLIENT_SIGNAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INVOICE_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROVIDER_SIGNAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createInvoice"
  ): TypedContractMethod<
    [
      _mistData: MistInvoiceEscrowWrapper.MistSecretStruct,
      _amounts: BigNumberish[],
      _data: BytesLike,
      _type: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mistPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "privateDispute"
  ): TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _details: BytesLike,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _role: BigNumberish,
      _proof: Verifier.ProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "privateRelease"
  ): TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _milestone: BigNumberish,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _proof: Verifier.ProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "privateWithdraw"
  ): TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _proof: Verifier.ProofStruct,
      _encNote: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<
    [
      _invoiceAddr: AddressLike,
      _clientAward: BigNumberish,
      _providerAward: BigNumberish,
      _details: BytesLike,
      _encNotes: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      proof: Verifier.ProofStruct,
      root: BigNumberish,
      digest: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signal: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
